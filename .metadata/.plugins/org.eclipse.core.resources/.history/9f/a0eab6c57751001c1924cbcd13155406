package ar.edu.unlu.Modelo;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;


public class Juego {
	private Mazo mazo;
	private List<Jugador> jugadores = new ArrayList<>();
	private Ronda ronda;
	private Reglas reglas;
	private Mesa mesa;
//	private boolean juegoIniciado = false; 
	private List<Observador> observadores = new ArrayList<>();
	private Estado estadoJuego = Estado.CONFIGURANDO;
	private int jugadorActual;
	private int puntajeObjetivo = 6;
	private Jugador ganador;
	private Jugador ganadorRonda;
	private Jugador ultimoJugadorEnLevantar;
	
	public Juego(Mazo mazo, Mesa mesa) {
		this.setMazo(mazo);
		//this.setJugadores(jugadores);
		this.reglas = new Reglas(this.ronda);
		this.ronda = new Ronda();
		this.setMesa(mesa);
		//this.setObservadores(observadores);
	}

	public Mazo getMazo() {
		return mazo;
	}

	public void setMazo(Mazo mazo) {
		this.mazo = mazo;
	}

	public List<Jugador> getJugadores() {
		return jugadores;
	}

	public void setJugadores(List<Jugador> jugadores) {
		this.jugadores = jugadores;
	}

	public Ronda getRonda() {
		return ronda;
	}

	public void setRonda(Ronda ronda) {
		this.ronda = ronda;
	}

	public Reglas getReglas() {
		return reglas;
	}

	public void setReglas(Reglas reglas) {
		this.reglas = reglas;
	}

	public Mesa getMesa() {
		return mesa;
	}

	public void setMesa(Mesa mesa) {
		this.mesa = mesa;
	}
	
	public void setObservadores(List<Observador> observadores) {
		this.observadores = observadores;
	}
	
	public Estado getEstadoJuego() {
		return this.estadoJuego;
	}
	
	public Integer getJugadorActual() {
		return jugadorActual;
	}

	public void setJugadorActual(int jugadorActual) {
		this.jugadorActual = jugadorActual;
	}
	
	
	public void addObservador(Observador observador) {
		observadores.add(observador);
	}

	public void repartirCartas() {
		for(Jugador jugador : this.jugadores) {
			Integer contador = 1;
			while (contador <= 3) {
				jugador.agregarCartas(this.mazo.darCarta());
				contador++;
			}
		}
	}
	
	public void darCartasALaMesa() {
		Integer contador = 1;
		while (contador <= 4) {
			this.mesa.agregarCarta(this.mazo.darCarta());
			contador++;
		}
	}
	
	
	public void iniciarJuego() {
		if (this.jugadores.size() < 2) {
			notificarMensaje("Debe agregar jugadores");
		}
		else {
			notificarMensaje("Juego iniciado");
			this.estadoJuego = Estado.JUGANDO;
			reparteGeneral();
			notificarEvento(EventosEscoba.JUEGOINICIADO);
		}
	}
	
	public void reparteGeneral() {
		repartirCartas();
		darCartasALaMesa();
		mensajesGenerales();
		if (huboEscobaDeMano()) {
			recuperarJugadorActual().agregarABaza(mesa.getCartas());
			mesa.getCartas().clear();
			recuperarJugadorActual().incrementarPuntos();
			recuperarJugadorActual().aumentarEscobas();
			notificarEvento(EventosEscoba.ESCOBA_DE_MANO);
			mensajesGenerales();
		}
	}
	
	
	public void mensajesGenerales() {
		notificarCartasDeLaMesa(mesa.getCartas());
		notificarTurno(recuperarJugadorActual().getNombre());
		notificarCartasJugador();
	}
	
	
	
	
	private void notificarCartasJugador() {
		for (Observador o : observadores) {
			o.notificarCartasJugador(this.recuperarJugadorActual().getCartas());
		}
		
	}

	private void notificarCartasDeLaMesa(List<Carta> cartas) {
		for (Observador o : observadores) {
			o.notificarCartasDeLaMesa(cartas);
		}
		
	}

	private void notificarTurno(String nombre) {
		for (Observador o : observadores) {
			o.notificarTurno(nombre);
		}
		
	}
	
	private void notificarGanador(Jugador jugador) {
		for (Observador o : observadores) {
			o.notificarGanador(this.ganador);
		}
	}
	
	

	public void notificarEvento(EventosEscoba evento) {
		for (Observador o : observadores) {
			o.notificarEvento(evento);
			}
	}

	public void agregarJugador(String nombre) {
		if (jugadores.size() < 2) {
			jugadores.add(new Jugador(nombre));
			notificarMensaje("Jugador agregado");
		} else {
			notificarMensaje("Maximo de jugadores agregados.");
		}
		
		
	}

	private void notificarMensaje(String mensaje) {
		for (Observador o : observadores) {
			o.notificarMensaje(mensaje);
		}
	}
	
	public void cambiarAJuegoFinalizado() {
		boolean juegoTerminado = false;
		Integer i = 0;
		while ((i < jugadores.size()) && !(juegoTerminado)) {
			if ( jugadores.get(i).getPuntos() >= this.puntajeObjetivo) { 
				juegoTerminado = true;
				this.ganador = jugadores.get(i);
				this.estadoJuego = Estado.FINALIZADO;
				notificarEvento(EventosEscoba.JUEGOFINALIZADO);
			}
			i++;
		}
	}
	
	
	public void actualizarPuntosJugadores() {
		ronda.actualizarPuntos(this.jugadores);
		cambiarAJuegoFinalizado();
	}
	
	
	

	public List<Carta> mostrarCartasMesa() {
		return mesa.getCartas();
	}
	
	public void cambiarJugador() {
		jugadorActual++;
		if (jugadorActual == jugadores.size())
			jugadorActual = 0;
		if (!(this.reglas.esFinDeMano(this.jugadores)))
			mensajesGenerales();
		
	}

	public List<Carta> cartasJugadorActual() {
		return jugadores.get(jugadorActual).getCartas();
		
	}
	
	
	public void limpiarJuego() {
		for (Jugador jugador : this.jugadores) {
			jugador.getCartas().clear();
			jugador.getBaza().clear();
		}
		mazo.llenarMazo();
		mesa.getCartas().clear();
	}

	public void tirarCarta(Integer numero) {
		this.mesa.agregarCarta(recuperarJugadorActual().tirarCarta(numero));
		if (ronda.comprobarFinDeRonda(this.mazo, this.jugadores)) {
			juntarCartasSobrantes();
			actualizarPuntosJugadores();
			if (this.estadoJuego != Estado.FINALIZADO) {
				actualizarGanadorRonda();	
				notificarEvento(EventosEscoba.RONDAFINALIDAZA);
				reparteGeneral();
			}
			else {
				actualizarGanadorJuego();
				notificarGanador(ganador);
			}
		}
		else {
			cambiarJugador();
			if (reglas.esFinDeMano(this.jugadores)) {
				notificarEvento(EventosEscoba.MANOFINALIZADA);
				repartirCartas();
				mensajesGenerales();
			}
		}
	}
	
	public Jugador recuperarJugadorActual() {
		return this.jugadores.get(jugadorActual);
	}
	
	
	public Integer cantidadCartasJugadorActual() {
		
		return this.jugadores.get(jugadorActual).cantidadDeCartas();
	}
	
	
	
	public void levantarCartas(Integer numero, ArrayList<Integer> cartas){			
		List<Carta> cartasDeLaMesa = mesa.juntarCartas(cartas);
		List<Carta> posibleLevantada = recuperarJugadorActual().levantarCartas(numero, cartasDeLaMesa);
		if (reglas.verificarSuma15(posibleLevantada)){
			recuperarJugadorActual().agregarABaza(posibleLevantada);
			this.ultimoJugadorEnLevantar = recuperarJugadorActual();
			notificarMensaje("Cartas levantadas.");
			ronda.setUltimoJugadorEnLevantar(recuperarJugadorActual());
			recuperarJugadorActual().sacarCarta(numero);
			mesa.sacarCartas(cartasDeLaMesa);
			if (mesa.cantidadDeCartas() == 0) {
				recuperarJugadorActual().aumentarEscobas();
				recuperarJugadorActual().incrementarPuntos();
				notificarMensaje("Ha hecho una escoba!");
			}
			if (reglas.levanto7DeOro(posibleLevantada)) {
				recuperarJugadorActual().incrementarPuntos();
				notificarMensaje("Ha levantado el 7 de oro!");
			}
			
			if (ronda.comprobarFinDeRonda(this.mazo, this.jugadores)) {
				juntarCartasSobrantes();
				actualizarPuntosJugadores();
				if (this.estadoJuego != Estado.FINALIZADO) {
					actualizarGanadorRonda();
					notificarEvento(EventosEscoba.RONDAFINALIDAZA);
					reparteGeneral();
				}
				else {
					actualizarGanadorJuego();
					notificarGanador(ganador);
				}
			}
			else {
				cambiarJugador();
				if (reglas.esFinDeMano(this.jugadores)) {
					notificarEvento(EventosEscoba.MANOFINALIZADA);
					repartirCartas();
				}
			}
		} else {
			notificarMensaje("Las cartas no suman 15. No se han levantado.");
			mensajesGenerales();
					}
	}
	
	public List<Carta> seleccionarCartasMesa(){
		return null;
	}

	public Integer cantidadCartasMesa() {
		return mesa.cantidadDeCartas();
	}
	
	public String nombreJugadorActual() {
		return recuperarJugadorActual().getNombre();
	}

	public boolean turnoJugadorActual() {
		return recuperarJugadorActual().isTurno();
	}

	public Jugador getGanador() {
		return this.ganador;
	}
	
	public void actualizarGanadorJuego() {
		Integer i = 0;
		Integer puntaje = -99;
		while (i < this.jugadores.size()) {
			if (this.jugadores.get(i).getPuntos() > puntaje){
				puntaje = this.jugadores.get(i).getPuntos();
				ganador = this.jugadores.get(i);
			}
			i++;
		}
	}
	
	
	public void juntarCartasSobrantes() {
		if (mesa.getCartas().size() != 0) {														//Si al finalizar la ronda hay cartas en la mesa
			this.ultimoJugadorEnLevantar.agregarABaza(mesa.getCartas());						//Se las queda el ultimo jugador que realizo una levantada
			mesa.sacarCartas(mesa.getCartas());													//Y luego se eliminan de la mesa
			
		}
	}

	public void cartasBazaJugador() {
		for (Jugador jugador : this.jugadores) {
			jugador.mostrarBaza();
		}
	}
	
	public String getNombreGanadorRonda() {
		return this.ganadorRonda.getNombre();
	}
	
	public void actualizarGanadorRonda() {
		Integer puntosGanador = -99;
		Integer i = 0;
		while ((i < jugadores.size())) {
			if ( jugadores.get(i).getPuntos() >= puntosGanador) { 
				puntosGanador = jugadores.get(i).getPuntos();
				this.ganadorRonda = jugadores.get(i);
			}
			i++;
		}
		
		limpiarJuego();
	}
	
	
	public boolean huboEscobaDeMano() {
		return reglas.verificarSuma15(mesa.getCartas());
	}


}
	


